name: Synchro AAP DGERpersonnels, collectif, entrante 01/01/25

on:
  # Ex√©cution programm√©e (tous les jours √† 02h00 UTC = 04h00 heure d'√©t√© fran√ßaise)
  schedule:
    - cron: '0 02 * * *'
  
  # Permettre l'ex√©cution manuelle avec options
  workflow_dispatch:
    inputs:
      demarche_numbers:
        description: 'Num√©ros de d√©marches √† synchroniser (s√©par√©s par des virgules, vide = toutes)'
        required: false
        default: ''
      force_sync:
        description: 'Forcer la synchronisation m√™me si d√©marche d√©sactiv√©e'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Mode test (ne fait que valider la configuration)'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-config:
    name: Validation de la configuration
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      demarches-count: ${{ steps.validate.outputs.count }}
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validation de la configuration
      id: validate
      env:
        # Configuration Grist
        GRIST_BASE_URL: ${{ secrets.GRIST_BASE_URL }}
        GRIST_API_KEY: ${{ secrets.GRIST_API_KEY }}
        GRIST_DOC_ID: ${{ secrets.GRIST_DOC_ID }}
        
        # Tokens API par d√©marche - CORRIG√â
        DEMARCHES_API_TOKEN_DGER_PERSONNELS: ${{ secrets.DEMARCHES_API_TOKEN_DGER_PERSONNELS }}
        DEMARCHES_API_TOKEN_DGER_COLLECTIF: ${{ secrets.DEMARCHES_API_TOKEN_DGER_COLLECTIF }}
        DEMARCHES_API_TOKEN_DGER_ENTRANTE: ${{ secrets.DEMARCHES_API_TOKEN_DGER_ENTRANTE }}
      run: |
        echo "üîç Validation de la configuration multi-d√©marche..."
        python multi_demarche_manager.py --validate-only
        
        # R√©cup√©rer le statut et le nombre de d√©marches
        python -c "
        from multi_demarche_manager import MultiDemarcheManager
        import sys
        import os
        
        try:
            manager = MultiDemarcheManager()
            valid = manager.validate_configuration()
            enabled_count = len(manager.get_enabled_demarches())
            
            # Nouvelle syntaxe GitHub Actions
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f'valid={str(valid).lower()}\n')
                f.write(f'count={enabled_count}\n')
            
            if not valid:
                sys.exit(1)
        except Exception as e:
            print(f'‚ùå Erreur de validation: {e}')
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write('valid=false\n')
                f.write('count=0\n')
            sys.exit(1)
        "

  sync-demarches:
    name: Synchronisation des d√©marches
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.config-valid == 'true'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Cr√©ation du r√©pertoire de logs
      run: mkdir -p logs
    
    - name: Affichage des param√®tres d'ex√©cution
      run: |
        echo "üìã Param√®tres d'ex√©cution :"
        echo "  - D√©marches configur√©es : ${{ needs.validate-config.outputs.demarches-count }}"
        echo "  - D√©marches sp√©cifiques : ${{ github.event.inputs.demarche_numbers || 'Toutes les d√©marches activ√©es' }}"
        echo "  - Force sync : ${{ github.event.inputs.force_sync || 'false' }}"
        echo "  - Mode test : ${{ github.event.inputs.dry_run || 'false' }}"
        echo "  - D√©clencheur : ${{ github.event_name }}"
    
    - name: Synchronisation multi-d√©marche
      env:
        # Configuration Grist
        GRIST_BASE_URL: ${{ secrets.GRIST_BASE_URL }}
        GRIST_API_KEY: ${{ secrets.GRIST_API_KEY }}
        GRIST_DOC_ID: ${{ secrets.GRIST_DOC_ID }}
        
        # Tokens API par d√©marche
        DEMARCHES_API_TOKEN_DGER_PERSONNELS: ${{ secrets.DEMARCHES_API_TOKEN_DGER_PERSONNELS }}
        DEMARCHES_API_TOKEN_DGER_COLLECTIF : ${{ secrets.DEMARCHES_API_TOKEN_DGER_COLLECTIF }}
        DEMARCHES_API_TOKEN_DGER_ENTRANTE : ${{ secrets.DEMARCHES_API_TOKEN_DGER_ENTRANTE }}
        
        # Param√®tres d'ex√©cution
        DEMARCHE_NUMBERS: ${{ github.event.inputs.demarche_numbers }}
        FORCE_SYNC: ${{ github.event.inputs.force_sync }}
        DRY_RUN: ${{ github.event.inputs.dry_run }}
        
        # Configuration de logging
        LOG_LEVEL: INFO
      run: |
        echo "üöÄ D√©marrage de la synchronisation multi-d√©marche"
        
        # Construire la commande
        CMD="python multi_demarche_manager.py"
        
        # Mode test
        if [ "$DRY_RUN" = "true" ]; then
          CMD="$CMD --dry-run"
          echo "üß™ Mode test activ√©"
        fi
        
        # D√©marches sp√©cifiques
        if [ -n "$DEMARCHE_NUMBERS" ]; then
          CMD="$CMD --demarches $DEMARCHE_NUMBERS"
          echo "üìã Synchronisation des d√©marches sp√©cifiques : $DEMARCHE_NUMBERS"
        else
          echo "üìã Synchronisation de toutes les d√©marches activ√©es"
        fi
        
        # Force sync
        if [ "$FORCE_SYNC" = "true" ]; then
          CMD="$CMD --force"
          echo "‚ö° Mode force activ√©"
        fi
        
        # Afficher la commande finale
        echo "Commande : $CMD"
        
        # Ex√©cuter
        eval $CMD
    
    - name: Upload des logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
        if-no-files-found: ignore
    
    - name: Notification de fin
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Synchronisation multi-d√©marche termin√©e avec succ√®s"
          echo "üìä ${{ needs.validate-config.outputs.demarches-count }} d√©marches configur√©es"
        else
          echo "‚ùå Synchronisation multi-d√©marche √©chou√©e"
          exit 1
        fi

  # Job pour les notifications (simplifi√©, sans conditions sur secrets)
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [validate-config, sync-demarches]
    if: always()
    
    steps:
    - name: Notification webhook (optionnelle)
      continue-on-error: true
      run: |
        # Ne s'ex√©cute que si NOTIFICATION_WEBHOOK_URL est d√©fini
        if [ -n "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" ]; then
          STATUS="${{ needs.sync-demarches.result }}"
          DEMARCHES_COUNT="${{ needs.validate-config.outputs.demarches-count }}"
          
          if [ "$STATUS" = "success" ]; then
            MESSAGE="‚úÖ Synchronisation multi-d√©marche r√©ussie ($DEMARCHES_COUNT d√©marches)"
            COLOR="good"
          else
            MESSAGE="‚ùå Synchronisation multi-d√©marche √©chou√©e"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\",\"color\":\"$COLOR\"}" \
          ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          
          echo "üìß Notification webhook envoy√©e"
        else
          echo "üìß Aucun webhook configur√©, notification ignor√©e"
        fi
    
    - name: Notification email (optionnelle)
      continue-on-error: true
      run: |
        # Ne s'ex√©cute que si les param√®tres email sont d√©finis
        if [ -n "${{ secrets.NOTIFICATION_EMAIL_TO }}" ] && [ -n "${{ secrets.SMTP_SERVER }}" ]; then
          echo "üìß Configuration email d√©tect√©e, envoi de la notification..."
          
          # Utiliser curl pour envoyer l'email via API ou un service tiers
          # Ou installer et utiliser un client email simple
          echo "STATUS: ${{ needs.sync-demarches.result }}"
          echo "DEMARCHES: ${{ needs.validate-config.outputs.demarches-count }}"
          echo "URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Pour une vraie notification email, vous pouvez:
          # 1. Utiliser un service comme SendGrid, Mailgun, etc.
          # 2. Ou configurer un webhook vers votre propre service
          # 3. Ou utiliser l'action email (voir commentaire ci-dessous)
          
          echo "üìß Notification email pr√©par√©e (impl√©mentation √† personnaliser)"
        else
          echo "üìß Aucun param√®tre email configur√©, notification ignor√©e"
        fi
